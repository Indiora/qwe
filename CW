#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SENT 100
#define INIT 10
#define CHARS 30
#define WORDS 20

char* sentence(){
    int size = SENT;
    char* wrong;
    char* buf = (char*)malloc(size * sizeof(char));
    char c = 0;
    int n = 0;
        do {
            c = getchar();
            buf[n] = c;
            n++;
            if(n == (size - 2)){
                size += SENT;
                buf = (char*)realloc(buf, size * sizeof(char));
            }
        } while(!strchr(".\n", c));
    buf[n] = '\0';

    return buf;
}

int text(char*** buf){
    int size = INIT;
    (*buf) = (char**)malloc(size * sizeof(char*));
    int n = 0;
    do
    {
        (*buf)[n] = sentence();
        n++;
        if(n == (size - 2)){
            size += INIT;
            (*buf) = realloc((*buf), size * sizeof(char*));

        }
    }while(((*buf)[n-1][0]) != '\n');
    return (n-1);
}

int deleterep(char*** ts, int count){
    int k = 0;
    int i = 0;
    int j = 0;
    for(i = 0; i < count; i++){
        for(j = i + 1; j < count; j++ ){
            if(!strcasecmp((*ts)[i], (*ts)[j])){
                free((*ts)[j]);
                for(k = j; k < (count - 1); k++){
                    (*ts)[k] = (*ts)[k+1];
                }
                count--;
                j--;
            }
        }
    }
    return count;
}

char** making_words (char* sentence, int* parts){
    int wordslim = WORDS;
    int charlim = CHARS;
    char symbol = sentence[0];
    int flag = 0;
    int countinsent;
    int countinword = 0;
    int wordscount = 0;
    char** wordsarr = (char**)malloc(WORDS * sizeof(char*));
    wordsarr[0] = (char*)malloc(CHARS * sizeof(char));
    wordsarr[0][0] = sentence[0];
    if ((sentence[0] == ',') || (sentence[0] == ' ') || (sentence[0] == '.'))
        flag = 1;
    for (countinsent = 1; symbol != '.'; countinsent++){

        if (charlim == countinword + 3){
            charlim += CHARS;
            wordsarr[wordscount] = (char*)realloc(wordsarr[wordscount], sizeof(char) * charlim);
        }

        if (wordslim == wordscount + 1){
            wordslim += WORDS;
            wordsarr = (char**)realloc(wordsarr, sizeof(char*) * wordslim);
        }

        symbol = sentence[countinsent];

        if ((symbol == ',') || (symbol == ' ') || (symbol == '.')){
            if (flag == 1){
                countinword++;
                wordsarr[wordscount][countinword] = symbol;
            }

            else{
                wordsarr[wordscount][countinword + 1] = '\0';
                countinword = 0;
                wordscount++;
                wordsarr[wordscount] = malloc(CHARS * sizeof(char));
                wordsarr[wordscount][countinword] = symbol;
                flag = 1;
                charlim = CHARS;
            }

        }

        else{
            if (flag == 0){
                countinword++;
                wordsarr[wordscount][countinword] = symbol;
            }

            else{
                wordsarr[wordscount][countinword + 1] = '\0';
                countinword = 0;
                wordscount++;
                wordsarr[wordscount] = malloc(CHARS * sizeof(char));
                wordsarr[wordscount][countinword] = symbol;
                flag = 0;
                charlim = CHARS;
            }
        }
        if (symbol == '.'){
            wordsarr[wordscount][countinword + 1] = '\0';
            charlim = CHARS;
            }
    }

    *parts = wordscount + 1;
    return wordsarr;
    }

void fruits(char*** ts, int count){
    int i = 0;
    int j = 0;
    int del = 0;
    char** wordsarr;
    char banana[] = "banana";
    char apple[] = "apple";
    int parts = 0;
    for (i = 0; i < count; i++){
        parts = 0;
        wordsarr = making_words((*ts)[i], &parts);
        for(j = 0; j < parts; j++){
            printf("\033[0m");
            if(!strcmp(wordsarr[j], banana)){
                printf("\033[1;31m");
            }
            if(!strcmp(wordsarr[j], apple)){
                printf("\033[1;32m");
            }
            printf("%s", wordsarr[j]);
        }
        for(del = 0; del < parts; del++){
            free(wordsarr[del]);
        }
        free(wordsarr);
    }
    printf("\nYou choose: ");
}

int dellong(char*** ts, int count){
    int i = 0;
    int j = 0;
    for (i = 0; i < count; i++){
        if(strlen((*ts)[i]) > 15){
            free((*ts)[i]);
            for (j = i; j < count - 1; j++){
            (*ts)[j] = (*ts)[j+1];
            }
            i--;
            count--;
        }
    }
    return count;
}

void convert(char*** ts, int count){
    int i = 0;
    int j = 0;
    for (i = 0; i < count; i++){
       for(j = 0; (*ts)[i][j] != '.'; j++){
            if(isalpha((*ts)[i][j])){
                if(isupper((*ts)[i][j])){
                    (*ts)[i][j] = tolower((*ts)[i][j]);
                }
            }
            if(isdigit((*ts)[i][j]))
                (*ts)[i][j] = 'D';

        }
    }
}

int Comparator(const void* x11, const void* x22){
    char* x1 = *(char**)x11;
    char* x2 = *(char**)x22;
    int i = 0;
    int flag1 = 0;
    int flag2 = 0;
    unsigned int sum1 = 1;
    unsigned int sum2 = 1;
    for(i = 0; x1[i] != '.'; i++){
        if(isdigit(x1[i])){
            flag1 = 1;
            sum1 = sum1 * (x1[i] - '0');
        }
      }
    if(flag1 == 0){
        sum1 = 0;
    }

    for(i = 0; x2[i] != '.'; i++){
        if(isdigit(x2[i])){
            flag2 = 1;
            sum2 = sum2 * (x2[i] - '0');
        }
    }
     if(flag2 == 0){
        sum2 = 0;
    }

    if ( sum1 <  sum2 ) return -1;
    if ( sum1 == sum2 ) return 0;
    if ( sum1 >  sum2 ) return 1;
}



void Sortirovka(char*** ts, int count){
    qsort((*ts), count, sizeof(char*), Comparator);
}

void printtext(char*** ts, int count){
    int i = 0;
    for(i = 0; i < count; i++){
            printf("%s", (*ts)[i]);
    }
    printf("\nYou choose: ");
}

int main(){
    printf("Type your text:\n");
    int del = 0;
    int count = 0;
    int flag = 0;
    int i = 0;
    char** ts;
    count = text(&ts);
    count = deleterep(&ts, count);
    printf("Choose the function:\n 0: Exit the program\n 1: Print all sentence with banana or apple\n 2: Convert sentences and replaced all digits with the letter D\n 3: Delete all sentences longer than 15\n 4: Sort ascending works of all numbers in it\n");
    printf("You choose: ");
    while(flag != 9){
        if (scanf("%d", &flag) == 1){
            switch(flag){
                case 1:
                    fruits(&ts, count);
                    break;
                case 2:
                    convert(&ts, count);
                    printtext(&ts, count);
                    break;
                case 3:
                    count = dellong(&ts, count);
                    printtext(&ts, count);
                    break;
                case 4:
                    Sortirovka(&ts, count);
                    printtext(&ts, count);
                    break;
                case 0:
                    printf("Goodbye!");
                    flag = 9;
                    break;
            }
        }
        else{
            for(del = 0; del < (count+1); del++){
                free(ts[del]);
            }
            free(ts);
            return 0;
        }
    }
    for(del = 0; del < (count+1); del++){
        free(ts[del]);
    }
        free(ts);
    return 0;
}
